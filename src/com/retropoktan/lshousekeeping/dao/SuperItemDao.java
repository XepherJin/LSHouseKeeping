package com.retropoktan.lshousekeeping.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUPER_ITEM.
*/
public class SuperItemDao extends AbstractDao<SuperItem, String> {

    public static final String TABLENAME = "SUPER_ITEM";

    /**
     * Properties of entity SuperItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SuperItemId = new Property(0, String.class, "SuperItemId", true, "SUPER_ITEM_ID");
        public final static Property SuperItemName = new Property(1, String.class, "SuperItemName", false, "SUPER_ITEM_NAME");
        public final static Property SuperItemImageUrl = new Property(2, String.class, "SuperItemImageUrl", false, "SUPER_ITEM_IMAGE_URL");
    };


    public SuperItemDao(DaoConfig config) {
        super(config);
    }
    
    public SuperItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUPER_ITEM' (" + //
                "'SUPER_ITEM_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: SuperItemId
                "'SUPER_ITEM_NAME' TEXT NOT NULL ," + // 1: SuperItemName
                "'SUPER_ITEM_IMAGE_URL' TEXT);"); // 2: SuperItemImageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUPER_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SuperItem entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSuperItemId());
        stmt.bindString(2, entity.getSuperItemName());
 
        String SuperItemImageUrl = entity.getSuperItemImageUrl();
        if (SuperItemImageUrl != null) {
            stmt.bindString(3, SuperItemImageUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SuperItem readEntity(Cursor cursor, int offset) {
        SuperItem entity = new SuperItem( //
            cursor.getString(offset + 0), // SuperItemId
            cursor.getString(offset + 1), // SuperItemName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // SuperItemImageUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SuperItem entity, int offset) {
        entity.setSuperItemId(cursor.getString(offset + 0));
        entity.setSuperItemName(cursor.getString(offset + 1));
        entity.setSuperItemImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SuperItem entity, long rowId) {
        return entity.getSuperItemId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SuperItem entity) {
        if(entity != null) {
            return entity.getSuperItemId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
